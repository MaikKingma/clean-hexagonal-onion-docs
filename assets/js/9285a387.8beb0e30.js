"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[203],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<r;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7398:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),i=["components"],l={sidebar_position:8},s="N+1 - Do it yourself",u={unversionedId:"n+1",id:"n+1",title:"N+1 - Do it yourself",description:"Back to school ;P . You learn the theory, then you apply it to something new.",source:"@site/docs/7-n+1.md",sourceDirName:".",slug:"/n+1",permalink:"/clean-hexagonal-onion-docs/docs/n+1",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/7-n+1.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Query Authors",permalink:"/clean-hexagonal-onion-docs/docs/query-author"},next:{title:"The Anti-Corruption-Layer Adapter (ACL)",permalink:"/clean-hexagonal-onion-docs/docs/acl-adapter"}},c={},d=[{value:"Domain Model Diagram",id:"domain-model-diagram",level:3},{value:"The API",id:"the-api",level:3},{value:"The assignment",id:"the-assignment",level:3},{value:"Some things to watch our for",id:"some-things-to-watch-our-for",level:3},{value:"Validate",id:"validate",level:3}],p={toc:d};function m(e){var n=e.components,l=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"n1---do-it-yourself"},"N+1 - Do it yourself"),(0,r.kt)("p",null,"Back to school ;P . You learn the theory, then you apply it to something new.\nWhat would authors be without books! (Maybe bloggers, but anyways...) Remember our domain model and API spec:"),(0,r.kt)("h3",{id:"domain-model-diagram"},"Domain Model Diagram"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"domain-model.png",src:t(8495).Z,width:"1729",height:"1221"})),(0,r.kt)("h3",{id:"the-api"},"The API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### DONE\nPOST /authors/commands/register\nGET /authors\n\n### TODO in this assignment\nPOST /authors/{id}/commands/writeBook\nGET /books?title\n\n### TODO in upcoming ACL section\nPOST /books/{id}/commands/publish\n")),(0,r.kt)("h3",{id:"the-assignment"},"The assignment"),(0,r.kt)("p",null,"Your new assignment is to enable authors to write a book. Try to find out which steps you need to take in order to\ndo so. Try to backtrace the steps we have taken so far."),(0,r.kt)("p",null,"To not get hung up on Database evolution, here is the liquibase script you will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"src/main/resources/db/db.changelog-master.xml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">\n    <include file="changelog/01_create_author_seq.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/02_create_author_table.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/03_create_book_seq.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/04_create_book_table.xml" relativeToChangelogFile="true"/>\n</databaseChangeLog>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add file ",(0,r.kt)("inlineCode",{parentName:"li"},"changelog/03_create_book_seq.xml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">\n\n    <changeSet id="03-create-book-sequence" author="Maik Kingma">\n        <comment>Create Book sequence</comment>\n        <createSequence sequenceName="book_seq" minValue="10001"/>\n    </changeSet>\n</databaseChangeLog>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add file ",(0,r.kt)("inlineCode",{parentName:"li"},"changelog/04_create_book_table.xml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">\n\n  <changeSet id="04-create-book-table" author="Maik Kingma">\n    <comment>Create book table</comment>\n    <createTable tableName="book">\n      <column name="id" type="bigint">\n        <constraints primaryKey="true" primaryKeyName="book_id_pk" nullable="false"/>\n      </column>\n      <column name="title" type="text">\n        <constraints nullable="false"/>\n      </column>\n      <column name="author_id" type="bigint">\n        <constraints nullable="false"/>\n      </column>\n      <column name="genre" type="text">\n        <constraints nullable="false"/>\n      </column>\n      <column name="published" type="boolean" defaultValue="false"/>\n      <column name="publisher_id" type="uuid"/>\n      <column name="isbn" type="text"/>\n    </createTable>\n\n    <addForeignKeyConstraint\n            baseColumnNames="author_id"\n            baseTableName="book"\n            constraintName="FK_AUTHOR_BOOK"\n            deferrable="false"\n            initiallyDeferred="false"\n            onDelete="RESTRICT"\n            onUpdate="RESTRICT"\n            referencedColumnNames="id"\n            referencedTableName="author"\n            validate="true"/>\n  </changeSet>\n</databaseChangeLog>\n')),(0,r.kt)("p",null,"Let's assume we have 4 genres available: 'FANTASY','HORROR', 'CRIME', 'ROMANCE'. Make sure to add the enum in the\ncode accordingly."),(0,r.kt)("p",null,"Now try to complete the rest!"),(0,r.kt)("h3",{id:"some-things-to-watch-our-for"},"Some things to watch our for"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remember that an entity in DDD is not the same as an entity in the DB sense. So the OneToMany and ManyToOne relation\nannotations need to be placed on the JPA data model classes only.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    @OneToMany(mappedBy = "authorJPA", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private Set<BookJPA> books;\n')),(0,r.kt)("p",null,"and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "author_id")\n    private AuthorJPA author;\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Expert tip:")," If you are stuck, maybe try some TDD with the help of the Validate paragraph?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GOOD LUCK!")),(0,r.kt)("h3",{id:"validate"},"Validate"),(0,r.kt)("p",null,"Done? Let's test your implementation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the test for the creation of books:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootTest\n@AutoConfigureMockMvc\nclass AuthorActionCommandsTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private AuthorRepository authorRepository;\n\n    @Autowired\n    private BookRepository bookRepository;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    @BeforeEach\n    void beforeAll() {\n        authorRepository.deleteAll();\n        bookRepository.deleteAll();\n    }\n\n    @Test\n    @Transactional\n    void writeBook() throws Exception {\n        // given\n        entityManager.createNativeQuery(\n                "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n                .setParameter(1, 1)\n                .setParameter(2, "firstName")\n                .setParameter(3, "lastName")\n                .executeUpdate();\n\n        var writeBookDTOJson = objectMapper.writeValueAsString(new WriteBookDTO("title", Genre.CRIME));\n        var expected = BookJPA.builder()\n                               .title("title")\n                               .genre(Genre.CRIME)\n                               .published(false)\n                               .author(AuthorJPA.builder().id(1L).build())\n                .build();\n        // when\n        mockMvc.perform(post("/authors/1/commands/writeBook")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(writeBookDTOJson))\n                .andExpect(status().isAccepted());\n        bookRepository.flush();\n        // then\n        List<BookJPA> books = bookRepository.findAll();\n        assertThat(books.size()).isEqualTo(1);\n        assertThat(books.get(0)).usingRecursiveComparison().ignoringFields("id").isEqualTo(expected);\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the test for querying of books:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootTest\n@AutoConfigureMockMvc\nclass BookQueriesTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private BookRepository bookRepository;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    @BeforeEach\n    void beforeEach() {\n        bookRepository.deleteAll();\n        bookRepository.flush();\n    }\n\n    @Test\n    @Transactional\n    void shouldFindBooksWithNoQueryParam() throws Exception {\n        // given\n        entityManager.createNativeQuery(\n                        "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n                .setParameter(1, 1)\n                .setParameter(2, "firstName")\n                .setParameter(3, "lastName")\n                .executeUpdate();\n        var book1 = BookJPA.builder()\n                .author(AuthorJPA.builder().id(1L).build())\n                .genre(Genre.HORROR)\n                .title("horror-book")\n                .build();\n        var book2 = BookJPA.builder()\n                .author(AuthorJPA.builder().id(1L).build())\n                .genre(Genre.ROMANCE)\n                .title("romance-book")\n                .build();\n        var expectedBookView1 = new BookView("horror-book", "firstName lastName", null);\n        var expectedBookView2 = new BookView("romance-book", "firstName lastName", null);\n\n        bookRepository.saveAll(List.of(book1, book2));\n        bookRepository.flush();\n        // when\n        MvcResult result = mockMvc.perform(get("/books")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andReturn();\n        // then\n        var resultingBookViews = objectMapper.readValue(\n                result.getResponse().getContentAsString(), new TypeReference<List<BookView>>() {});\n        assertThat(resultingBookViews).hasSize(2);\n        assertThat(resultingBookViews).usingRecursiveFieldByFieldElementComparatorIgnoringFields("id")\n                .containsExactlyInAnyOrder(expectedBookView1, expectedBookView2);\n    }\n\n    @Test\n    @Transactional\n    void shouldFindBooksFilteredByQueryParamTitle() throws Exception {\n        // given\n        entityManager.createNativeQuery(\n                        "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n                .setParameter(1, 1)\n                .setParameter(2, "firstName")\n                .setParameter(3, "lastName")\n                .executeUpdate();\n        var book1 = BookJPA.builder()\n                .author(AuthorJPA.builder().id(1L).build())\n                .genre(Genre.HORROR)\n                .title("horror-book")\n                .build();\n        var book2 = BookJPA.builder()\n                .author(AuthorJPA.builder().id(1L).build())\n                .genre(Genre.ROMANCE)\n                .title("romance-book")\n                .build();\n        var expectedBookView = new BookView("horror-book", "firstName lastName", null);\n\n        bookRepository.saveAll(List.of(book1, book2));\n        bookRepository.flush();\n        // when\n        MvcResult result = mockMvc.perform(get("/books")\n                    .accept(MediaType.APPLICATION_JSON)\n                    .queryParam("title", "orror-"))\n                .andExpect(status().isOk())\n                .andReturn();\n        // then\n        var resultingBookViews = objectMapper.readValue(\n                result.getResponse().getContentAsString(), new TypeReference<List<BookView>>() {});\n        assertThat(resultingBookViews).hasSize(1);\n        assertThat(resultingBookViews).usingRecursiveFieldByFieldElementComparatorIgnoringFields("id")\n                .containsExactly(expectedBookView);\n    }\n}\n')),(0,r.kt)("p",null,"Hope all worked out for you! Once again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'if (allTestsGreen == true) {\n    log.info("DONE! Let\'s move on to the next topic: The ACL adapter")}\nelse{\n    log.error("Shout for help!") || (git stash && git checkout 7-n+1-done)\n}\n')))}m.isMDXComponent=!0},8495:function(e,n,t){n.Z=t.p+"assets/images/domain-model-e486c955b1f5f57bc4da72497e2d59a5.png"}}]);