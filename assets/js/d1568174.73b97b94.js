"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[310],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7425:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return u}});var a=t(3117),o=(t(7294),t(3905));const r={sidebar_position:8},i="Do it yourself",l={unversionedId:"do-it-yourself",id:"do-it-yourself",title:"Do it yourself",description:"Back to school! First, you learn the theory, then you apply it to something new.",source:"@site/docs/8-do-it-yourself.md",sourceDirName:".",slug:"/do-it-yourself",permalink:"/clean-hexagonal-onion-docs/docs/do-it-yourself",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/8-do-it-yourself.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Separate the Domain Interaction Layer",permalink:"/clean-hexagonal-onion-docs/docs/separate-domain-interaction"},next:{title:"The Anti-Corruption-Layer Adapter (ACL)",permalink:"/clean-hexagonal-onion-docs/docs/acl-adapter"}},s={},u=[{value:"Domain Model Diagram",id:"domain-model-diagram",level:3},{value:"The API",id:"the-api",level:3},{value:"The assignment",id:"the-assignment",level:3},{value:"Some things to watch our for",id:"some-things-to-watch-our-for",level:3},{value:"Validate",id:"validate",level:3}],c={toc:u},d="wrapper";function p(e){let{components:n,...r}=e;return(0,o.kt)(d,(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"do-it-yourself"},"Do it yourself"),(0,o.kt)("p",null,"Back to school! First, you learn the theory, then you apply it to something new.\nWhat would authors be without books! (Maybe bloggers, but anyways...)"),(0,o.kt)("p",null,"After having completed the last chapter where we split of our domain interaction layer, we need to update our domain\nmodel:"),(0,o.kt)("h3",{id:"domain-model-diagram"},"Domain Model Diagram"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"updated_domain_model.jpg",src:t(5140).Z,width:"2144",height:"1467"})),(0,o.kt)("h3",{id:"the-api"},"The API"),(0,o.kt)("p",null,"In this chapter you will need to apply what you have learned so far and create two new commands in our API spec that\nwill allow an author to write a book and afterwards publish it (publishing is part of the next chapter)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'### DONE\nPOST /authors/commands/register HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "firstName": "PLACE_YOUR_FIRST_NAME",\n  "lastName": "PLACE_YOUR_LAST_NAME"\n}\n\n### TODO in this assignment\nPOST /authors/10001/commands/writeBook HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "title": "PLACE_YOUR_TILE",\n  "genre": "HORROR"\n}\n\n### TODO in this assignment\nGET /books?title= HTTP/1.1\nAccept: application/json\nHost: localhost:8080\n')),(0,o.kt)("h3",{id:"the-assignment"},"The assignment"),(0,o.kt)("p",null,"Your new assignment is to enable authors to write a book. Try to find out which steps you need to take in order to\ndo so. Try to backtrace the steps we have taken so far."),(0,o.kt)("p",null,"To not get hung up on Database evolution, here is the liquibase script you will need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"src/main/resources/db/db.changelog-master.xml"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">\n    <include file="changelog/01_create_author_seq.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/02_create_author_table.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/03_create_book_seq.xml" relativeToChangelogFile="true"/>\n    <include file="changelog/04_create_book_table.xml" relativeToChangelogFile="true"/>\n</databaseChangeLog>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add file ",(0,o.kt)("inlineCode",{parentName:"li"},"changelog/03_create_book_seq.xml"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">\n\n    <changeSet id="03-create-book-sequence" author="Maik Kingma">\n        <comment>Create Book sequence</comment>\n        <createSequence sequenceName="book_seq" minValue="10001"/>\n    </changeSet>\n</databaseChangeLog>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add file ",(0,o.kt)("inlineCode",{parentName:"li"},"changelog/04_create_book_table.xml"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<databaseChangeLog\n        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">\n\n  <changeSet id="04-create-book-table" author="Maik Kingma">\n    <comment>Create book table</comment>\n    <createTable tableName="book">\n      <column name="id" type="bigint">\n        <constraints primaryKey="true" primaryKeyName="book_id_pk" nullable="false"/>\n      </column>\n      <column name="title" type="text">\n        <constraints nullable="false"/>\n      </column>\n      <column name="author_id" type="bigint">\n        <constraints nullable="false"/>\n      </column>\n      <column name="genre" type="text">\n        <constraints nullable="false"/>\n      </column>\n      <column name="published" type="boolean" defaultValue="false"/>\n      <column name="publisher_id" type="uuid"/>\n      <column name="isbn" type="text"/>\n    </createTable>\n\n    <addForeignKeyConstraint\n            baseColumnNames="author_id"\n            baseTableName="book"\n            constraintName="FK_AUTHOR_BOOK"\n            deferrable="false"\n            initiallyDeferred="false"\n            onDelete="RESTRICT"\n            onUpdate="RESTRICT"\n            referencedColumnNames="id"\n            referencedTableName="author"\n            validate="true"/>\n  </changeSet>\n</databaseChangeLog>\n')),(0,o.kt)("p",null,"Let's assume we have 4 genres available: 'FANTASY','HORROR', 'CRIME' and 'ROMANCE'. Make sure to add the enum in the\ncode accordingly."),(0,o.kt)("p",null,"Now try to complete the rest!"),(0,o.kt)("h3",{id:"some-things-to-watch-our-for"},"Some things to watch our for"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remember that an entity in DDD is not the same as an entity in the ORM sense. So the OneToMany and ManyToOne relation\nannotations need to be placed on the JPA data model classes only.")),(0,o.kt)("p",null,"The following code snippets might prove useful:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'    @OneToMany(mappedBy = "authorJPA", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private Set<BookJPA> books;\n')),(0,o.kt)("p",null,"and"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "author_id")\n    private AuthorJPA author;\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"TIP:")," If you are stuck, TDD can be practiced with the code from the ",(0,o.kt)("a",{parentName:"p",href:"#validate"},"validate")," paragraph?")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"GOOD LUCK!")),(0,o.kt)("h3",{id:"validate"},"Validate"),(0,o.kt)("p",null,"Done? Let's test your implementation:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the test for the creation of books:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootTest\n@AutoConfigureMockMvc\nclass AuthorActionCommandsTest {\n\n  @Autowired\n  private MockMvc mockMvc;\n\n  @Autowired\n  private ObjectMapper objectMapper;\n\n  @Autowired\n  private BookRepository bookRepository;\n\n  @Autowired\n  private EntityManager entityManager;\n\n  @BeforeEach\n  void beforeAll() {\n    entityManager.createNativeQuery("DELETE FROM author where true; DELETE FROM book where true;")\n            .executeUpdate();\n  }\n\n  @Test\n  @Transactional\n  void writeBook() throws Exception {\n    // given\n    entityManager.createNativeQuery(\n                    "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n            .setParameter(1, 1)\n            .setParameter(2, "firstName")\n            .setParameter(3, "lastName")\n            .executeUpdate();\n\n    var writeBookDTOJson = objectMapper.writeValueAsString(new WriteBookPayload("title", "CRIME"));\n    var expected = BookJPA.builder()\n            .title("title")\n            .genre("CRIME")\n            .published(false)\n            .author(AuthorJPA.builder().id(1L).firstName("firstName").lastName("lastName").build())\n            .build();\n    // when\n    mockMvc.perform(post("/authors/1/commands/writeBook")\n                    .contentType(MediaType.APPLICATION_JSON)\n                    .content(writeBookDTOJson))\n            .andExpect(status().isAccepted());\n    entityManager.flush();\n    // then\n    List<BookJPA> books = bookRepository.findAll();\n    assertThat(books.size()).isEqualTo(1);\n    assertThat(books.get(0)).usingRecursiveComparison().ignoringFields("id").isEqualTo(expected);\n  }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the test for the querying of books:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootTest\n@AutoConfigureMockMvc\nclass BookQueriesTest {\n\n  @Autowired\n  private MockMvc mockMvc;\n\n  @Autowired\n  private ObjectMapper objectMapper;\n\n  @Autowired\n  private EntityManager entityManager;\n\n  @BeforeEach\n  void beforeEach() {\n    entityManager.createNativeQuery("DELETE FROM author where true; DELETE FROM book where true;")\n            .executeUpdate();\n  }\n\n  @Test\n  @Transactional\n  void shouldFindBooksWithNoQueryParam() throws Exception {\n    // given\n    entityManager.createNativeQuery(\n                    "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n            .setParameter(1, 1)\n            .setParameter(2, "firstName")\n            .setParameter(3, "lastName")\n            .executeUpdate();\n    var book1 = BookJPA.builder()\n            .author(AuthorJPA.builder().id(1L).build())\n            .genre("HORROR")\n            .title("horror-book")\n            .build();\n    var book2 = BookJPA.builder()\n            .author(AuthorJPA.builder().id(1L).build())\n            .genre("ROMANCE")\n            .title("romance-book")\n            .build();\n    var expectedBookView1 = new BookView("horror-book", "HORROR", "firstName lastName");\n    var expectedBookView2 = new BookView("romance-book", "ROMANCE", "firstName lastName");\n\n    entityManager.persist(book1);\n    entityManager.persist(book2);\n    entityManager.flush();\n    // when\n    MvcResult result = mockMvc.perform(get("/books")\n                    .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andReturn();\n    // then\n    var resultingBookViews = objectMapper.readValue(\n            result.getResponse().getContentAsString(), new TypeReference<List<BookView>>() {\n            });\n    assertThat(resultingBookViews).hasSize(2);\n    assertThat(resultingBookViews).usingRecursiveFieldByFieldElementComparatorIgnoringFields("id")\n            .containsExactlyInAnyOrder(expectedBookView1, expectedBookView2);\n  }\n\n  @Test\n  @Transactional\n  void shouldFindBooksFilteredByQueryParamTitle() throws Exception {\n    // given\n    entityManager.createNativeQuery(\n                    "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n            .setParameter(1, 1)\n            .setParameter(2, "firstName")\n            .setParameter(3, "lastName")\n            .executeUpdate();\n    var book1 = BookJPA.builder()\n            .author(AuthorJPA.builder().id(1L).build())\n            .genre("HORROR")\n            .title("horror-book")\n            .build();\n    var book2 = BookJPA.builder()\n            .author(AuthorJPA.builder().id(1L).build())\n            .genre("ROMANCE")\n            .title("romance-book")\n            .build();\n    var expectedBookView = new BookView("horror-book", "HORROR", "firstName lastName");\n\n    entityManager.persist(book1);\n    entityManager.persist(book2);\n    entityManager.flush();\n    // when\n    MvcResult result = mockMvc.perform(get("/books")\n                    .accept(MediaType.APPLICATION_JSON)\n                    .queryParam("title", "orror-"))\n            .andExpect(status().isOk())\n            .andReturn();\n    // then\n    var resultingBookViews = objectMapper.readValue(\n            result.getResponse().getContentAsString(), new TypeReference<List<BookView>>() { });\n    assertThat(resultingBookViews).hasSize(1);\n    assertThat(resultingBookViews).usingRecursiveFieldByFieldElementComparatorIgnoringFields("id")\n            .containsExactly(expectedBookView);\n  }\n}\n')),(0,o.kt)("p",null,"Good job! You now know how to apply the Clean Hexagonal Onion yourself. Once again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'if (allTestsGreen == true) {\n    log.info("DONE! Let\'s move on to the next topic: The ACL adapter")}\nelse{\n    log.error("Shout for help!") || (git stash && git checkout 8-do-it-yourself-done)\n}\n')))}p.isMDXComponent=!0},5140:function(e,n,t){n.Z=t.p+"assets/images/updated_domain_model-c458e974a94713f46b5d70aa22bca598.jpg"}}]);