"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[873],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,h=d["".concat(c,".").concat(p)]||d[p]||m[p]||i;return n?o.createElement(h,a(a({ref:t},s),{},{components:n})):o.createElement(h,a({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6520:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var o=n(3117),r=(n(7294),n(3905));const i={sidebar_position:3},a="3: Getting to know the domain",l={unversionedId:"getting-to-know-the-domain",id:"getting-to-know-the-domain",title:"3: Getting to know the domain",description:"We will be building a simple service, where we can register book authors, let them write books and eventually",source:"@site/docs/3.getting-to-know-the-domain.md",sourceDirName:".",slug:"/getting-to-know-the-domain",permalink:"/clean-hexagonal-onion-docs/docs/getting-to-know-the-domain",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/3.getting-to-know-the-domain.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2: Check out the Spring service",permalink:"/clean-hexagonal-onion-docs/docs/setting-up-an-initial-application"},next:{title:"4: Create the register Author command",permalink:"/clean-hexagonal-onion-docs/docs/create-author-command"}},c={},u=[{value:"Domain Diagram",id:"domain-diagram",level:3},{value:"The API",id:"the-api",level:3}],s={toc:u},d="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,o.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-getting-to-know-the-domain"},"3: Getting to know the domain"),(0,r.kt)("p",null,"We will be building a simple service, where we can register book authors, let them write books and eventually\npublish them. The publishers though will not be part of our bounded context, and we will need to retrieve any\ninformation about them from an external publisher API (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/publisher-service"},"https://github.com/MaikKingma/publisher-service"),")."),(0,r.kt)("p",null,"In our domain model we have identified two aggregates: Author and Book.\nA publisher is information from another bounded context. It might change over time, and we have no control over it as such.\nThat is why we make it an immutable value object in our context, that is not persisted to our database. The only\nthing we need to know from a publisher, is the identifier of the publisher. We will need it in order to identify the\npublisher of a book."),(0,r.kt)("h3",{id:"domain-diagram"},"Domain Diagram"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"domain-model.png",src:n(7770).Z,width:"1729",height:"1191"})),(0,r.kt)("h3",{id:"the-api"},"The API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /authors/commands/register\nPOST /authors/{id}/commands/writeBook\nGET /authors\n\nGET /books?title\nPOST /books/{id}/commands/publish\n")),(0,r.kt)("p",null,"If there are any questions about the domain model or the API definition feel free to ask anybody from codecentric or\nyour neighbour."))}m.isMDXComponent=!0},7770:function(e,t,n){t.Z=n.p+"assets/images/domain-model-e8009df47741b19d3979425119a06777.jpg"}}]);