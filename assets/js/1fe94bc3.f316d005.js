"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[873],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,h=m["".concat(c,".").concat(p)]||m[p]||d[p]||i;return n?o.createElement(h,a(a({ref:t},s),{},{components:n})):o.createElement(h,a({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6520:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:3},c="Getting to know the domain",u={unversionedId:"getting-to-know-the-domain",id:"getting-to-know-the-domain",title:"Getting to know the domain",description:"We will be building a simple service where we can register book authors and let them write books and eventually",source:"@site/docs/3.getting-to-know-the-domain.md",sourceDirName:".",slug:"/getting-to-know-the-domain",permalink:"/clean-hexagonal-onion-docs/docs/getting-to-know-the-domain",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/3.getting-to-know-the-domain.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Check out the Spring service",permalink:"/clean-hexagonal-onion-docs/docs/setting-up-an-initial-application"},next:{title:"Create the register Author command",permalink:"/clean-hexagonal-onion-docs/docs/create-author-command"}},s={},d=[{value:"Domain Diagram",id:"domain-diagram",level:3},{value:"The API",id:"the-api",level:3}],m={toc:d};function p(e){var t=e.components,l=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-to-know-the-domain"},"Getting to know the domain"),(0,i.kt)("p",null,"We will be building a simple service where we can register book authors and let them write books and eventually\npublish them. The publishers though will not be part of our bounded context and we will need to retrieve any\ninformation about publishers from the publisher API."),(0,i.kt)("p",null,"In our domain model we have identified two aggregates: Author and Book.\nA publisher is information from another bounded context. It might change and we have no control over it as such.\nThat is why we make it an immutable value object that is not persisted to our database. The only thing we need to know\nfrom it is the identifier of the publisher, which we will need in order to identify the publisher of a book."),(0,i.kt)("h3",{id:"domain-diagram"},"Domain Diagram"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"domain-model.png",src:n(8495).Z,width:"1729",height:"1221"})),(0,i.kt)("h3",{id:"the-api"},"The API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"POST /authors/commands/register\nPOST /authors/{id}/commands/writeBook\nGET /authors\n\nGET /books?title\nPOST /books/{id}/commands/publish\n")),(0,i.kt)("p",null,"If there are any questions about the domain model or the API definition feel free to ask anybody from codecentric or\nyour neighbour."))}p.isMDXComponent=!0},8495:function(e,t,n){t.Z=n.p+"assets/images/domain-model-e486c955b1f5f57bc4da72497e2d59a5.png"}}]);