"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[875],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6876:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_position:6},i="Query Authors",u={unversionedId:"query-author",id:"query-author",title:"Query Authors",description:"_What goes up must come down!_",source:"@site/docs/6-query-author.md",sourceDirName:".",slug:"/query-author",permalink:"/clean-hexagonal-onion-docs/docs/query-author",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/6-query-author.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Persist the Author data to the DB",permalink:"/clean-hexagonal-onion-docs/docs/persist-author-data"},next:{title:"Separate the Domain Interaction Layer",permalink:"/clean-hexagonal-onion-docs/docs/separate-domain-interaction"}},l={},s=[{value:"OPTIONAL: Run the app on localhost",id:"optional-run-the-app-on-localhost",level:3},{value:"Implement the Query endpoint",id:"implement-the-query-endpoint",level:3},{value:"Validate",id:"validate",level:3}],p={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query-authors"},"Query Authors"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"What goes up must come down!"))),(0,a.kt)("p",null,"or in our case"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"What goes into the DB must come out!"))),(0,a.kt)("h3",{id:"optional-run-the-app-on-localhost"},"OPTIONAL: Run the app on localhost"),(0,a.kt)("p",null,"By the way, if you run your docker compose file and start the Spring app you can also test your API at runtime manually.\nGot to ",(0,a.kt)("inlineCode",{parentName:"p"},"http/AuthorCommands.http")," and run the request against your localhost:8080."),(0,a.kt)("p",null,"(in case you don't have it, as it is part of my part of prepared *-done branches)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'### Register an author\nPOST /authors/commands/register HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "firstName": "PLACE_YOUR_FIRST_NAME",\n  "lastName": "PLACE_YOUR_LAST_NAME"\n}\n')),(0,a.kt)("h3",{id:"implement-the-query-endpoint"},"Implement the Query endpoint"),(0,a.kt)("p",null,"We want to make our authors readable via our REST API. For that purpose we introduce"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"### Get authors\nGET /authors HTTP/1.1\nHost: localhost:8080\nAccept: application/json\n")),(0,a.kt)("p",null,"This chapter will be a bit less guided in terms of code snippets. Let's see how far you get!"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You need to create a GET mapping in a new file ",(0,a.kt)("inlineCode",{parentName:"li"},"/query/AuthorQueries.java")," in our query section of the clean\nhexagonal onion. Remember, that we also need to decouple the query layer from our domain core. Hence, we introduce\nthe following view model that our query will return:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public record AuthorView (Long id, String name) {\n  public AuthorView(Author author) {\n    this(author.getId(), author.getFullName());\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"AuthorService.java")," (and in turn also the ",(0,a.kt)("inlineCode",{parentName:"li"},"AuthorServiceImpl.java"),")"),(0,a.kt)("li",{parentName:"ul"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"AuthorMapper.java")," because we now need to map from data model to domain model. (add Builders and\nGetters where necessary)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Hint 1:")," The annotation ",(0,a.kt)("inlineCode",{parentName:"p"},'@Builder(builderMethodName = "restore")')," might come in quite useful in the Author.class")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Hint 2:")," You may want to try TDD to complete this one :-)")),(0,a.kt)("h3",{id:"validate"},"Validate"),(0,a.kt)("p",null,"Let's test your implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootTest\n@AutoConfigureMockMvc\nclass AuthorQueriesTest {\n\n  @Autowired\n  private MockMvc mockMvc;\n\n  @Autowired\n  private ObjectMapper objectMapper;\n\n  @Autowired\n  private EntityManager entityManager;\n\n  @BeforeEach\n  void beforeAll() {\n    entityManager.createNativeQuery("DELETE FROM author WHERE true;").executeUpdate();\n  }\n\n  @Test\n  @Transactional\n  void getAll() throws Exception {\n    // given\n    var authorJPA = AuthorJPA.builder().firstName("firstName").lastName("lastName").build();\n    entityManager.persist(authorJPA);\n    entityManager.flush();\n    AuthorView expected = new AuthorView(Author.createAuthor("firstName", "lastName"));\n    // when then\n    MvcResult result = mockMvc.perform(get("/authors")\n                    .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andReturn();\n\n    var resultingAuthorViews = objectMapper.readValue(\n            result.getResponse().getContentAsString(), new TypeReference<List<AuthorView>>() { });\n    assertThat(resultingAuthorViews)\n            .usingRecursiveFieldByFieldElementComparatorIgnoringFields("id")\n            .containsExactly(expected);\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'if (allTestsGreen == true) {\n    log.info("DONE! Let\'s move on to the next topic: Separate the Domain Interaction Layer")}\nelse{\n    log.error("Shout for help!") || (git stash && git checkout 6-query-author-done)\n}\n')))}d.isMDXComponent=!0}}]);