"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[249],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8660:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:8},l="The Process Adapter",p={unversionedId:"process-adapter",id:"process-adapter",title:"The Process Adapter",description:"We still want to publish a book. We know all available publishers from the previous section and made it available in",source:"@site/docs/9-process-adapter.md",sourceDirName:".",slug:"/process-adapter",permalink:"/clean-hexagonal-onion-docs/docs/process-adapter",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/9-process-adapter.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"The Anti-Corruption-Layer Adapter (ACL)",permalink:"/clean-hexagonal-onion-docs/docs/acl-adapter"}},c={},u=[{value:"The command",id:"the-command",level:3},{value:"1. Task: Implement another ACL adapter.",id:"1-task-implement-another-acl-adapter",level:3},{value:"2. Task: Implement Book Command",id:"2-task-implement-book-command",level:3},{value:"3. Task: Get the Book by ID",id:"3-task-get-the-book-by-id",level:3},{value:"4. Task: Allow book publishing",id:"4-task-allow-book-publishing",level:3},{value:"5. Task: Update the domain and data source",id:"5-task-update-the-domain-and-data-source",level:3},{value:"6. Task: Consume the published domain event.",id:"6-task-consume-the-published-domain-event",level:3},{value:"7. Task: Delegate Implementation",id:"7-task-delegate-implementation",level:3},{value:"Validate",id:"validate",level:3}],d={toc:u};function h(e){var t=e.components,s=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-process-adapter"},"The Process Adapter"),(0,a.kt)("p",null,"We still want to publish a book. We know all available publishers from the previous section and made it available in\nour bounded context."),(0,a.kt)("p",null,"Assuming we have already created a manuscript as an author, we can now decide to publish that manuscript with one of\nthe available publishers."),(0,a.kt)("h3",{id:"the-command"},"The command"),(0,a.kt)("p",null,"For that purpose we create the ",(0,a.kt)("inlineCode",{parentName:"p"},"/commands/book/BookCommands.java")," class containing our new command API endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /books/{id}/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "6b4ca9c9-b3ae-4130-b3f8-2da873c3940e"\n}\n')),(0,a.kt)("p",null,"The behaviour of this endpoint should comply with the following functional requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A book can only be published with a publisher that actually exits. SO, we need to validate that the chosen\npublisher exists in the source context of publishers, the publisher service."),(0,a.kt)("li",{parentName:"ul"},"We want the publishing to happen asynchronous, i.e. our command should simply return that it accepted the\npublishing request, and it will be passed on for further processing. (Eventual Consistency).")),(0,a.kt)("p",null,"We achieve this passing for further processing by publishing a domain event (reference ",(0,a.kt)("a",{parentName:"p",href:"https://www.baeldung.com/spring-data-ddd#use-abstractaggregateroot-template"},"https://www.baeldung.com/spring-data-ddd#use-abstractaggregateroot-template"),")"),(0,a.kt)("p",null,"While it looks easy at first sight, we need to invest a little more coding effort than Baeldung because we\nsegregated the data entity from the actual domain aggregate."),(0,a.kt)("h3",{id:"1-task-implement-another-acl-adapter"},"1. Task: Implement another ACL adapter."),(0,a.kt)("p",null,"First things first: in order to validate the existence of a publisher by Id the publisher service from the previous\nsection exposes this endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"### Get authors\nGET /publishers/{id} HTTP/1.1\nHost: localhost:8081\nAccept: application/json\n")),(0,a.kt)("p",null,"implement this in our ACL adapter"),(0,a.kt)("h3",{id:"2-task-implement-book-command"},"2. Task: Implement Book Command"),(0,a.kt)("p",null,"implement our new book commands endpoint and for now only log the response of the getPublisherById call"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /books/{id}/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "6b4ca9c9-b3ae-4130-b3f8-2da873c3940e"\n}\n')),(0,a.kt)("h3",{id:"3-task-get-the-book-by-id"},"3. Task: Get the Book by ID"),(0,a.kt)("p",null,"Retrieve the book corresponding to the ID form the path parameter"),(0,a.kt)("h3",{id:"4-task-allow-book-publishing"},"4. Task: Allow book publishing"),(0,a.kt)("p",null,"No publishing without a publisher. Hence, publishing should only be triggerable from within a publisher class. Add\nthis function to ",(0,a.kt)("inlineCode",{parentName:"p"},"Publisher.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void publishBook(Book book) {\n    book.requestPublishing(id);\n}\n")),(0,a.kt)("h3",{id:"5-task-update-the-domain-and-data-source"},"5. Task: Update the domain and data source"),(0,a.kt)("p",null,"We want to allow a publishing request and the publishing of domain events.\nTo be bale to handle domain events we need a new dependency in our ",(0,a.kt)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-commons</artifactId>\n    <version>2.7.2</version>\n</dependency>\n")),(0,a.kt)("p",null,"The challenge of this task is to actually register domain events on the domain, but then also map them to\nthe actual JPA entity which will eventually be persisted by the Repo, which in turn will trigger the handling of domain events in\n",(0,a.kt)("inlineCode",{parentName:"p"},"AbstractAggregateRoot.java"),"."),(0,a.kt)("p",null,"Here are some useful snippets. Can you place them in the correct places?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    @Getter\n    private final List<DomainEvent> domainEvents = new ArrayList<>();\n")),(0,a.kt)("p",null,"Our Domain event"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    @Value\n    public static class RequestPublishingEvent extends DomainEvent {\n        Long bookId;\n        UUID publisherId;\n    }\n    // and\n    public abstract class DomainEvent {}\n")),(0,a.kt)("p",null,"The following snippet provides us the support of handling the Domain events correctly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class BookJPA extends AbstractAggregateRoot<BookJPA> {\n    // ...\n    public void registerDomainEvents(List<DomainEvent> domainEvents) {\n      domainEvents.forEach(this::andEvent);\n    }\n}\n")),(0,a.kt)("p",null,"In the class ",(0,a.kt)("inlineCode",{parentName:"p"},"Book.java")," we need to implement the method requestPublishing(id: UUID) which we previously referenced in\ntask 4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public void requestPublishing(UUID publisherId) {\n        // TODO assign the publisherID\n        // TODO and register a domain event\n    }\n")),(0,a.kt)("p",null,"Having done all that the ",(0,a.kt)("inlineCode",{parentName:"p"},"AbstractAggregateRoot")," will do the publishing for us. So on to the next task: we need to\nbe able to consume these events:"),(0,a.kt)("h3",{id:"6-task-consume-the-published-domain-event"},"6. Task: Consume the published domain event."),(0,a.kt)("p",null,"Create a class ",(0,a.kt)("inlineCode",{parentName:"p"},"/process/EventProcessor.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import lombok.extern.slf4j.Slf4j;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.book.Book;\nimport nl.codecentric.clean_hexagonal_onion_service.process.book.PublishBookDelegate;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.event.TransactionalEventListener;\n\nimport static org.springframework.transaction.event.TransactionPhase.AFTER_COMMIT;\n\n@Slf4j\n@Component\npublic class EventProcessor {\n\n    private final PublishBookDelegate publishBookDelegate;\n\n    public EventProcessor(PublishBookDelegate publishBookDelegate) {\n        this.publishBookDelegate = publishBookDelegate;\n    }\n    \n    @TransactionalEventListener(phase = AFTER_COMMIT)\n    public void handleEvent(Book.RequestPublishingEvent requestPublishingEvent) {\n        log.info(requestPublishingEvent.toString());\n        publishBookDelegate.publishBook(requestPublishingEvent);\n    }\n}\n")),(0,a.kt)("p",null,"This implementation will allow for the domain events on a JPA entity to be processed after the transaction was\ncommitted."),(0,a.kt)("h3",{id:"7-task-delegate-implementation"},"7. Task: Delegate Implementation"),(0,a.kt)("p",null,"Now try to actually implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"/process/book/PublishBookDelegate.java")," class."),(0,a.kt)("p",null,"Useful snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class PublishBookDelegate {\n\n  private final BookService bookService;\n  private final PublisherService publisherService;\n\n\n  public PublishBookDelegate(BookService bookService, PublisherService publisherService) {\n    this.bookService = bookService;\n    this.publisherService = publisherService;\n  }\n\n  @Transactional(propagation = REQUIRES_NEW)\n  public void publishBook(Book.RequestPublishingEvent event) {\n    // retrieve book by id from event\n    \n   // request the publishing of the book via the Publisher ACL layer (also see API docs below)\n\n    // update the isbn of the book you received as a response and then store the book\n  }\n}\n")),(0,a.kt)("p",null,"The API on the publisher service is defined as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /publishers/receiveBookOffer\nHost: localhost:8081\nContent-Type: application/json\n\n{\n  "publisherId": "<SOME-UUID>",\n  "author": "author name",\n  "title": "Cool Title"\n}\n\nReturns:\n{\n  "isbn": "ISBN-3895b77d-ee27-40de-9b08-bf24fe2a013a"\n}\n')),(0,a.kt)("p",null,"This is our most complex change yet so here is an overview of files you need to somehow touch along the way:\n",(0,a.kt)("img",{alt:"process-adapter-files.png",src:n(8392).Z,width:"650",height:"572"})),(0,a.kt)("h3",{id:"validate"},"Validate"),(0,a.kt)("p",null,"Let's test your implementation:"),(0,a.kt)("p",null,"Testing the endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport org.mockserver.client.MockServerClient;\nimport org.mockserver.model.Header;\nimport org.mockserver.springtest.MockServerTest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.json.Json;\nimport javax.persistence.EntityManager;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.mockserver.matchers.Times.exactly;\nimport static org.mockserver.model.HttpRequest.request;\nimport static org.mockserver.model.HttpResponse.response;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@MockServerTest\n@SpringBootTest\n@AutoConfigureMockMvc\nclass BookCommandsTest {\n\n    private static final Long BOOK_ID = 1L;\n    private static final Long AUTHOR_ID = 2L;\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    private MockServerClient mockServerClient;\n\n    @Test\n    @Transactional\n    void publishBook() throws Exception {\n        UUID publisherUUID = UUID.randomUUID();\n        configureMockGetPublisherById(publisherUUID.toString());\n        entityManager.createNativeQuery(\n                        "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n                .setParameter(1, AUTHOR_ID)\n                .setParameter(2, "firstName")\n                .setParameter(3, "lastName")\n                .executeUpdate();\n\n        entityManager.createNativeQuery(\n                        "INSERT INTO book (id, title, author_id, genre, published, publisher_id, isbn) " +\n                                "VALUES (?,?,?,?,?,?,?)")\n                .setParameter(1, BOOK_ID)\n                .setParameter(2, "title")\n                .setParameter(3, AUTHOR_ID)\n                .setParameter(4, "HORROR")\n                .setParameter(5, false)\n                .setParameter(6, null)\n                .setParameter(7, null)\n                .executeUpdate();\n\n        entityManager.flush();\n\n        var requestPublishingDTO = objectMapper.writeValueAsString(new PublishBookDTO(publisherUUID));\n        // when\n        mockMvc.perform(post(String.format("/books/%d/commands/publish", BOOK_ID))\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestPublishingDTO))\n                .andExpect(status().isAccepted());\n    }\n\n    private void configureMockGetPublisherById(String publisherId) {\n        var responseBody = Json.createObjectBuilder()\n                        .add("id", publisherId)\n                        .add("name", "Codecentric")\n                        .add("taxNumber", "VAT12345")\n                        .add("numberOfEmployees", 30)\n                        .add("yearlyRevenueInMillions", 99)\n                        .add("amountOfBooksPublished", 20)\n                        .build().toString();\n\n        mockServerClient.when(request().withMethod("GET").withPath("/publishers/" + publisherId), exactly(1)).respond(\n                response()\n                        .withStatusCode(200)\n                        .withHeaders(new Header("Content-Type", "application/json; charset=utf-8"))\n                        .withBody(responseBody)\n                        .withDelay(TimeUnit.SECONDS,1)\n        );\n    }\n}\n')),(0,a.kt)("p",null,"Testing the event publishing (we need a helper class for this one):\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/test/.../domain/book/TestEventHandler.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import nl.codecentric.clean_hexagonal_onion_service.process.DomainEvent;\nimport org.springframework.transaction.event.TransactionalEventListener;\n\ninterface TestEventHandler {\n    @TransactionalEventListener()\n    void handleEvent(DomainEvent event);\n\n}\n")),(0,a.kt)("p",null," ",(0,a.kt)("inlineCode",{parentName:"p"},"src/test/.../domain/book/BookTest.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import nl.codecentric.clean_hexagonal_onion_service.datasource.author.AuthorRepository;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.author.Author;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.author.AuthorService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\nimport java.util.UUID;\n\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\n\n@SpringJUnitConfig\n@SpringBootTest\nclass BookTest {\n\n  @MockBean\n  private TestEventHandler eventHandler;\n\n  @Autowired\n  private BookService bookService;\n\n  @Autowired\n  private AuthorService authorService;\n\n  @Autowired\n  private AuthorRepository authorRepository;\n\n  @Test\n  void shouldPublishEventOnSavingAggregate() {\n    var author = Author.builder().firstName("first").lastName("last").build();\n    authorService.registerAuthor(author);\n    authorRepository.flush();\n\n    var persistedAuthor = authorService.findAll().get(0);\n\n    var book = Book.builder().id(1L).author(persistedAuthor).published(false).genre(Genre.HORROR).title("title").build();\n    UUID publisherId = UUID.randomUUID();\n    book.requestPublishing(publisherId);\n    bookService.storeManuscript(book);\n    verify(eventHandler, times(1)).handleEvent(new Book.RequestPublishingEvent(1L, publisherId));\n  }\n\n  @Test\n  void shouldPublishEventOnSavingAggregateOnlyOnce() {\n    var author = Author.builder().firstName("first").lastName("last").build();\n    authorService.registerAuthor(author);\n    authorRepository.flush();\n\n    var persistedAuthor = authorService.findAll().get(0);\n\n    var book = Book.builder().id(1L).author(persistedAuthor).published(false).genre(Genre.HORROR).title("title").build();\n    UUID publisherId = UUID.randomUUID();\n    book.requestPublishing(publisherId);\n    bookService.storeManuscript(book);\n    bookService.storeManuscript(book);\n    verify(eventHandler, times(1)).handleEvent(new Book.RequestPublishingEvent(1L, publisherId));\n  }\n}\n')),(0,a.kt)("p",null,"Testing the event processor in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/test/.../process/EventProcessorTest.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import nl.codecentric.clean_hexagonal_onion_service.domain.book.Book;\nimport nl.codecentric.clean_hexagonal_onion_service.process.book.PublishBookDelegate;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\nimport java.util.UUID;\n\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\n\n@SpringJUnitConfig\n@SpringBootTest\nclass EventProcessorTest {\n\n  @Mock\n  private PublishBookDelegate publishBookDelegate;\n\n  @InjectMocks\n  private EventProcessor eventProcessor;\n\n  @Test\n  void shouldCallTheDelegateToActOnEvent() {\n    // when\n    Book.RequestPublishingEvent requestPublishingEvent = new Book.RequestPublishingEvent(1L, UUID.randomUUID());\n    eventProcessor.handleEvent(requestPublishingEvent);\n    // then\n    verify(publishBookDelegate, times(1)).publishBook(requestPublishingEvent);\n  }\n}\n")),(0,a.kt)("p",null,"Testing the delegate and ACL interaction in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/test/.../process/book/PublishBookDelegateTest.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import nl.codecentric.clean_hexagonal_onion_service.domain.author.Author;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.author.AuthorService;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.book.Book;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.book.BookService;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.book.Genre;\nimport nl.codecentric.clean_hexagonal_onion_service.domain.publisher.PublisherService;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockserver.client.MockServerClient;\nimport org.mockserver.model.Header;\nimport org.mockserver.springtest.MockServerTest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport javax.json.Json;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockserver.matchers.Times.exactly;\nimport static org.mockserver.model.HttpRequest.request;\nimport static org.mockserver.model.HttpResponse.response;\n\n@MockServerTest\n@SpringBootTest\nclass PublishBookDelegateTest {\n\n  private static final Long BOOK_ID = 1L;\n  private static final Long AUTHOR_ID = 2L;\n\n  @Mock\n  private AuthorService authorService;\n\n  @Mock\n  private BookService bookService;\n\n  @Autowired\n  private PublisherService publisherService;\n\n  private MockServerClient mockServerClient;\n\n  @Test\n  void shouldCallThePublisherServiceAPIWithCorrectPayload() {\n    PublishBookDelegate publishBookDelegate = new PublishBookDelegate(bookService, publisherService);\n    UUID publisherUUID = UUID.randomUUID();\n    UUID isbnUUID = UUID.randomUUID();\n    configureMockPublishersReceiveBookOffer(isbnUUID.toString());\n\n    var author = Author.builder().id(AUTHOR_ID).firstName("firstName").lastName("lastName").build();\n    when(authorService.findById(AUTHOR_ID)).thenReturn(author);\n    var book =\n            Book.builder().id(BOOK_ID).published(false).publisherId(publisherUUID).genre(Genre.HORROR).title(\n                    "title").author(author).build();\n    when(bookService.findById(BOOK_ID)).thenReturn(book);\n\n    // when\n    publishBookDelegate.publishBook(new Book.RequestPublishingEvent(BOOK_ID, publisherUUID));\n    // then\n    mockServerClient.verify(request()\n            .withPath("/publishers/receiveBookOffer")\n            .withMethod("POST")\n            .withBody(Json.createObjectBuilder()\n                    .add("publisherId", publisherUUID.toString())\n                    .add("author", "firstName lastName")\n                    .add("title", "title")\n                    .build().toString()));\n    book.updatePublishingInfo(String.format("ISBN-%s", isbnUUID));\n    verify(bookService, times(1)).storeManuscript(book);\n  }\n\n  private void configureMockPublishersReceiveBookOffer(String uuid) {\n    var responseBody = Json.createObjectBuilder()\n            .add("isbn", String.format("ISBN-%s", uuid))\n            .build().toString();\n\n    mockServerClient.when(request().withMethod("POST").withPath("/publishers/receiveBookOffer"), exactly(1)).respond(\n            response()\n                    .withStatusCode(202)\n                    .withHeaders(new Header("Content-Type", "application/json; charset=utf-8"))\n                    .withBody(responseBody)\n                    .withDelay(TimeUnit.SECONDS,1)\n    );\n  }\n}\n')),(0,a.kt)("p",null,"Give it a try!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'if (allTestsGreen == true) {\n    log.info("DONE! Let\'s move on to the next topic: The ACL adapter")}\nelse{\n    log.error("Shout for help!") || (git stash && git checkout 8-acl-adapter-done)\n}\n')))}h.isMDXComponent=!0},8392:function(e,t,n){t.Z=n.p+"assets/images/process-adapter-files-7dc4a0352060d979c7d36726bf3344f6.png"}}]);