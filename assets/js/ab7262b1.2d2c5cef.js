"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[606],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,g=u["".concat(p,".").concat(h)]||u[h]||d[h]||r;return n?o.createElement(g,i(i({ref:t},c),{},{components:n})):o.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1221:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s}});var o=n(3117),a=(n(7294),n(3905));const r={sidebar_position:2},i="2: Check out the Spring service",l={unversionedId:"setting-up-an-initial-application",id:"setting-up-an-initial-application",title:"2: Check out the Spring service",description:"Setting up the project from scratch would take up too much time and focus away from the important content of this",source:"@site/docs/2.setting-up-an-initial-application.md",sourceDirName:".",slug:"/setting-up-an-initial-application",permalink:"/clean-hexagonal-onion-docs/docs/setting-up-an-initial-application",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/2.setting-up-an-initial-application.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1: Workshop Intro",permalink:"/clean-hexagonal-onion-docs/docs/intro"},next:{title:"3: Getting to know the domain",permalink:"/clean-hexagonal-onion-docs/docs/getting-to-know-the-domain"}},p={},s=[{value:"OPTIONAL: DO IT YOURSELF",id:"optional-do-it-yourself",level:3},{value:"OPTIONAL: Your config should be something like this:",id:"optional-your-config-should-be-something-like-this",level:3},{value:"OPTIONAL: Create the clean hexagonal onion folder structure",id:"optional-create-the-clean-hexagonal-onion-folder-structure",level:3},{value:"OPTIONAL: Database",id:"optional-database",level:3},{value:"Validate",id:"validate",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2-check-out-the-spring-service"},"2: Check out the Spring service"),(0,a.kt)("p",null,"Setting up the project from scratch would take up too much time and focus away from the important content of this\nworkshop. Hence, I took the liberty of preparing a repository that you can fork or clone."),(0,a.kt)("p",null,"Button to GitHub is located in the header menu. Alternatively, click\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/clean-hexagonal-onion-workshop/tree/setup-done"},"here"),"."),(0,a.kt)("p",null,"You can either check out the prepared setup branch or, optionally set the project up yourself."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git checkout setup-done")),(0,a.kt)("p",null,"If you checked out this branch then you can proceed to the validation step and skip the following ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"OPTIONAL"))," steps.\n(there are still some mandatory steps after the optional ones). If you chose to set up the project yourself,\nplease follow the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"OPTIONAL"))," steps."),(0,a.kt)("h3",{id:"optional-do-it-yourself"},"OPTIONAL: DO IT YOURSELF"),(0,a.kt)("p",null,"If you feel like you want to do it all yourself you can use Spring Initializr to setup our spring boot project."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Go to the ",(0,a.kt)("a",{parentName:"li",href:"https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.1.0&packaging=jar&jvmVersion=17&groupId=nl.maikkingma&artifactId=clean_hexagonal_onion&name=Clean%20Hexagonal%20Onion&description=Workshop%3A%20Clean%20Hexagonal%20Onion%20with%20a%20Dash%20of%20DDD%20in%20Spring&packageName=nl.maikkingma.clean_hexagonal_onion&dependencies=web,data-jpa,postgresql,liquibase,lombok,devtools"},"Spring Initializr")),(0,a.kt)("li",{parentName:"ul"},"Choose your Project Dependency Manager of your choice (Maven or Gradle)."),(0,a.kt)("li",{parentName:"ul"},"Choose your Language of choice."),(0,a.kt)("li",{parentName:"ul"},"For the Spring Boot version at least 3.0.7 (3.1.0 is preselected)."),(0,a.kt)("li",{parentName:"ul"},"Fill in the Project Metadata as you see fit, but make sure packaging is Jar and the Java version is 17."),(0,a.kt)("li",{parentName:"ul"},"On the right-hand side you can see the add dependencies button. You need to add the following:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Spring Web"),(0,a.kt)("li",{parentName:"ul"},"Spring Data JPA"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL Driver"),(0,a.kt)("li",{parentName:"ul"},"Liquibase Migration"),(0,a.kt)("li",{parentName:"ul"},"Lombok"),(0,a.kt)("li",{parentName:"ul"},"Spring Boot DevTools (optional)")))),(0,a.kt)("h3",{id:"optional-your-config-should-be-something-like-this"},"OPTIONAL: Your config should be something like this:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"spring-initializr.png",src:n(6712).Z,width:"1514",height:"785"})),(0,a.kt)("h3",{id:"optional-create-the-clean-hexagonal-onion-folder-structure"},"OPTIONAL: Create the clean hexagonal onion folder structure"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"package-structure.png",src:n(6715).Z,width:"886",height:"604"})),(0,a.kt)("h3",{id:"optional-database"},"OPTIONAL: Database"),(0,a.kt)("p",null,"add these lines to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources/application.properties")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"# DataSource\nspring.datasource.url=jdbc:postgresql://localhost:5432/clean-hexagonal-onion-service\nspring.datasource.username=postgres\nspring.datasource.password=postgres\n")),(0,a.kt)("p",null,"and create a ",(0,a.kt)("inlineCode",{parentName:"p"},"./docker-compose.yml")," file and paste this content into it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.9'\n\nservices:\n  postgres:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: clean-hexagonal-onion-service\n    ports:\n      - '5432:5432'\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n")),(0,a.kt)("h2",{id:"validate"},"Validate"),(0,a.kt)("p",null,"Run the docker-compose script from the IDE or from the terminal with ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up --build"),".\nLast but not least, in order to avoid errors for now, please comment out the liquibase dependency in your ",(0,a.kt)("inlineCode",{parentName:"p"},"./pom.xml"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," You may have to enable annotation processing in your IDE for the Lombok dependency.")),(0,a.kt)("p",null,"Validate that the Spring application starts by running the application (without any errors).\nsimilar to this:\n",(0,a.kt)("img",{alt:"package-structure.png",src:n(8571).Z,width:"1604",height:"824"})),(0,a.kt)("p",null,"Alternatively, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mvn clean verify\n")),(0,a.kt)("p",null,"All green? Well done! We are now ready to move on to the next chapter."))}d.isMDXComponent=!0},6715:function(e,t,n){t.Z=n.p+"assets/images/package-structure-56a2c06a4d9d6b9a6b5f920e21a66dd8.png"},8571:function(e,t,n){t.Z=n.p+"assets/images/spring-first-run-8562bc6f397c86bb53406b5300189d0c.png"},6712:function(e,t,n){t.Z=n.p+"assets/images/spring-initializr-e2b7cde02aed72e1de07cc10fde921af.png"}}]);