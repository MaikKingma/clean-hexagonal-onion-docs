"use strict";(self.webpackChunkgraphql_docs=self.webpackChunkgraphql_docs||[]).push([[307],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return y}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),y=a,b=d["".concat(l,".").concat(y)]||d[y]||p[y]||o;return t?r.createElement(b,i(i({ref:n},c),{},{components:t})):r.createElement(b,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6470:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:1},l="Learn by doing",u={unversionedId:"doing/doing",id:"doing/doing",title:"Learn by doing",description:"We've written some tests. Can you fix them?",source:"@site/docs/doing/doing.md",sourceDirName:"doing",slug:"/doing/",permalink:"/graphql-docs/docs/doing/",draft:!1,editUrl:"https://github.com/codecentricnl/flutter_basic_workshop/tree/master/docs/docs/doing/doing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"4 - Learn by doing",permalink:"/graphql-docs/docs/category/4---learn-by-doing"},next:{title:"Solution",permalink:"/graphql-docs/docs/doing/test-solution"}},c={},p=[{value:"We&#39;ve written some tests. Can you fix them?",id:"weve-written-some-tests-can-you-fix-them",level:3}],d={toc:p};function y(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"learn-by-doing"},"Learn by doing"),(0,o.kt)("h3",{id:"weve-written-some-tests-can-you-fix-them"},"We've written some tests. Can you fix them?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="src/test/java/nl.codecentric.springforgraphql.CountryControllerTest.java"',title:'"src/test/java/nl.codecentric.springforgraphql.CountryControllerTest.java"'},'@SpringBootTest\n@AutoConfigureGraphQlTester\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\nclass CountryControllerTest {\n    @Autowired\n    private GraphQlTester graphQlTester;\n\n    @Test\n    @Order(1)\n    void itShouldGetAllCountries() {\n        this.graphQlTester\n                .documentName("countries")\n                .execute()\n                .path("data.countries.[*]")\n                .entityList(Country.class)\n                .hasSize(3)\n                .containsExactly(\n                        new Country("Netherlands", "NL"),\n                        new Country("Germany", "DE"),\n                        new Country("United States", "US")\n                );\n    }\n\n    @Test\n    void itShouldGetCountryByAbbreviation() {\n        this.graphQlTester\n                .documentName("country-by-abbreviation")\n                .variable("abbreviation", "NL")\n                .execute()\n                .path("data.getCountry")\n                .entity(Country.class)\n                .isEqualTo(new Country("Netherlands", "NL"));\n    }\n\n    @Test\n    void itShouldHaveAnErrorWhenACountryCannotBeFound() {\n        this.graphQlTester\n                .documentName("country-by-abbreviation")\n                .variable("abbreviation", "XX")\n                .execute()\n                .errors()\n                .satisfy(errors -> {\n                     assert errors.size() == 1;\n                });\n    }\n\n    @Test\n    void itShouldUppercaseAbbreviation() {\n        // The solution of this can be implemented in several ways. \n        // We expect the solution to be in the controller\n        this.graphQlTester\n                .documentName("create-country")\n                .variable("name", "France")\n                .variable("abbreviation", "fr")\n                .execute()\n                .path("data.createCountry.abbreviation")\n                .entity(String.class)\n                .isEqualTo("FR");\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Country.java"',title:'"Country.java"'},"public record Country(String name, String abbreviation) {}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CountryRepository.java"',title:'"CountryRepository.java"'},'@Component\npublic class CountryRepository {\nprivate List<Country> countries = Lists.newArrayList(\nnew Country("Netherlands", "NL"),\nnew Country("Germany", "DE"),\nnew Country("United States", "US")\n);\n\n    public void addCountry(Country country) {\n        countries.add(country);\n    }\n\n    public List<Country> findAll() {\n        return countries;\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CountryController.java"',title:'"CountryController.java"'},"public class CountryController {\n    //FIXME \ud83d\ude08 \n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="countries.graphql"',title:'"countries.graphql"'},"query countries {\n    countries {\n        name\n        abbreviation\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="country-by-abbreviation.graphql"',title:'"country-by-abbreviation.graphql"'},"query countryByAbbreviation($abbreviation: String!) {\n    getCountry(abbreviation: $abbreviation) {\n        name\n        abbreviation\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="create-country.graphql"',title:'"create-country.graphql"'},"mutation createCountry($name: String!, $abbreviation: String!) {\n    createCountry(name: $name, abbreviation: $abbreviation) {\n        name\n        abbreviation\n    }\n}\n")))}y.isMDXComponent=!0}}]);