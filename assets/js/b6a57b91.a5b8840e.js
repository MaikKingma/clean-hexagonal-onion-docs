"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[623],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(n),d=o,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9315:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:7},s="Separate the Domain Interaction Layer",u={unversionedId:"separate-domain-interaction",id:"separate-domain-interaction",title:"Separate the Domain Interaction Layer",description:"The keen observer might have realised already, we are missing one layer in our package structure.",source:"@site/docs/7-separate-domain-interaction.md",sourceDirName:".",slug:"/separate-domain-interaction",permalink:"/clean-hexagonal-onion-docs/docs/separate-domain-interaction",draft:!1,editUrl:"https://github.com/MaikKingma/clean-hexagonal-onion-docs/docs/7-separate-domain-interaction.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Query Authors",permalink:"/clean-hexagonal-onion-docs/docs/query-author"},next:{title:"N+1 - Do it yourself",permalink:"/clean-hexagonal-onion-docs/docs/n+1"}},c={},p=[{value:"Fixing the package structure",id:"fixing-the-package-structure",level:3},{value:"Moving code around",id:"moving-code-around",level:3},{value:"Removing domain core access in the External Adapter layer",id:"removing-domain-core-access-in-the-external-adapter-layer",level:3},{value:"Splitting up the AuthorMapper",id:"splitting-up-the-authormapper",level:3}],h={toc:p};function d(e){var t=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"separate-the-domain-interaction-layer"},"Separate the Domain Interaction Layer"),(0,r.kt)("p",null,"The keen observer might have realised already, we are missing one layer in our package structure.\nFor simplicity in the beginning, we skipped that extra layer of segregation between our Domain Code Layer\nand the External Adapters Layer, consisting of Query, Command, Process, Data and ACL."),(0,r.kt)("p",null,"However, this is leaves us with some incorrect code, and essentially we violate the principles introduced\nin the Clean Hexagonal Onion concept. Can you guess where that is?"),(0,r.kt)("p",null,"Let us have a look at the classes ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/command/author/AuthorCommands.java")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/query/author/AuthorQueries.java"),". Currently, they both  import the domain class\n",(0,r.kt)("inlineCode",{parentName:"p"},"Auhtor.java"),". And this is wrong, because we said that we want to protect our domain from the outside world and\nhave only our domain interaction layer interact with the domain core."),(0,r.kt)("p",null,"This chapter is aimed at fixing that mistake."),(0,r.kt)("h3",{id:"fixing-the-package-structure"},"Fixing the package structure"),(0,r.kt)("p",null,"We start by adding the missing package ",(0,r.kt)("inlineCode",{parentName:"p"},"domaininteraction")," to the package ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion"),"\n",(0,r.kt)("img",{alt:"domain-interaction_package.png",src:n(855).Z,width:"357",height:"283"})),(0,r.kt)("p",null,"Also, create the package ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/domaininteraction/author")," inside there."),(0,r.kt)("h3",{id:"moving-code-around"},"Moving code around"),(0,r.kt)("p",null,"First we move the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/domain/author/AuthorService.java"),"\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/domaininteraction/author/AuthorService.java"),". Since it is essentially a port\nwe defined to access our data source, it needs to reside in the domain interaction layer."),(0,r.kt)("p",null,"Looking at that interface, and considering the Single Responsibility Principle from SOLID, let us\nrename the interface so that it clearly states its purpose: ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorService")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorDataService")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public interface AuthorDataService {\n    void save(AuthorDTO author);\n    List<AuthorDTO> findAll();\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice that we renamed the function registerAuthor to save here since it better describes what we are trying\nto achieve here. We also removed any reference to the domain core in our port and instead introduced a AuthorDTO\n(data transfer object) that will function as a mapping layer between the domain core and the external adapters.")),(0,r.kt)("h3",{id:"removing-domain-core-access-in-the-external-adapter-layer"},"Removing domain core access in the External Adapter layer"),(0,r.kt)("p",null,"We now need to update the classes ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/command/author/AuthorCommands.java")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/query/author/AuthorQueries.java")," so that they do not have to import\n",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/domain/author/Author.java")," any longer."),(0,r.kt)("p",null,"For that purpose we need add a Flow to the domain interaction layer that makes needed functionality available to the\nexternal adapter layer. We create the ",(0,r.kt)("inlineCode",{parentName:"p"},"eu/javaland/clean_hexagonal_onion/domaininteraction/author/AuthorFlow.java"),",\nwhich will be our port for exposing the Author registration logic (in case of the command) and the finding all Authors\nlogic (in case of query)."),(0,r.kt)("p",null,"Let's do some TDD! Here is the test for the flow class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package eu.javaland.clean_hexagonal_onion.domaininteraction.author;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(MockitoExtension.class)\nclass AuthorFlowTest {\n\n    @Mock\n    private AuthorDataService authorDataService;\n\n    @InjectMocks\n    private AuthorFlow authorFlow;\n\n    @Test\n    void registerAuthorByName() {\n        // given\n        var expectedAuthor = new AuthorDTO(null, "firstName", "lastName");\n        ArgumentCaptor<AuthorDTO> argumentCaptor = ArgumentCaptor.forClass(AuthorDTO.class);\n        // when\n        authorFlow.registerAuthorByName("firstName", "lastName");\n        // then\n        verify(authorDataService, times(1)).save(argumentCaptor.capture());\n        AuthorDTO actualAuthor = argumentCaptor.getValue();\n        assertThat(actualAuthor).usingRecursiveComparison().isEqualTo(expectedAuthor);\n    }\n\n    @Test\n    void getListOfAllAuthors() {\n        // given\n        var authorsData = List.of(\n                new AuthorDTO(1L, "firstName1", "lastName1"),\n                new AuthorDTO(2L, "firstName2", "lastName2"));\n        when(authorDataService.findAll()).thenReturn(authorsData);\n        // when\n        List<AuthorDTO> actualResult = authorFlow.getListOfAllAuthors();\n        // then\n        assertThat(actualResult).containsExactlyInAnyOrder(new AuthorDTO(1L, "firstName1", "lastName1"),\n                new AuthorDTO(2L, "firstName2", "lastName2"));\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice that we introduced an AuthorDTO object. This is the pattern we use for isolating our domain core from the\noutside world. ")),(0,r.kt)("p",null,"Once you are done implementing, we will need to update the command and query controllers. They should not directly access\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorDataService")," but instead make use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorFlow")," class in the domain interaction layer."),(0,r.kt)("h3",{id:"splitting-up-the-authormapper"},"Splitting up the AuthorMapper"),(0,r.kt)("p",null,"You might have realised already, our AuthorMapper does not comply either. He is located in the external\nadapter layer (data) but has knowledge of our domain core, namely ",(0,r.kt)("inlineCode",{parentName:"p"},"Author.java"),"."),(0,r.kt)("p",null,"Here are some tests you can add to your code in order to TDD our way out of this dilemma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package eu.javaland.clean_hexagonal_onion.data.author;\n\nimport eu.javaland.clean_hexagonal_onion.domaininteraction.author.AuthorDTO;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass AuthorJPAMapperTest {\n\n    @Test\n    void mapToJPA() {\n        // given\n        AuthorDTO input = new AuthorDTO(1L, "first", "last");\n        AuthorJPA expectedOutput = AuthorJPA.builder()\n                .id(1L)\n                .firstName("first")\n                .lastName("last")\n                .build();\n        // when\n        AuthorJPA result = AuthorJPAMapper.mapToJPA(input);\n        // then\n        assertThat(result).usingRecursiveComparison().isEqualTo(expectedOutput);\n    }\n}\n')),(0,r.kt)("p",null,"and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package eu.javaland.clean_hexagonal_onion.domaininteraction.author;\n\nimport eu.javaland.clean_hexagonal_onion.domain.author.Author;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass AuthorDomainMapperTest {\n\n    @Test\n    void mapToDomain() {\n        // given\n        var input = new AuthorDTO(1L, "first", "last");\n        var expectedOutput = Author.restore()\n                .id(1L)\n                .firstName("first")\n                .lastName("last")\n                .build();\n        // when\n        var result = AuthorDomainMapper.mapToDomain(input);\n        // then\n        assertThat(result).usingRecursiveComparison().isEqualTo(expectedOutput);\n    }\n}\n')),(0,r.kt)("p",null,"After updating the mapper structure, make sure you update the rest of the classes where necessary.\nPay special attention to the classes that interact with each other across the layers.\nThere should not be any outward facing dependencies left after completing this chapter."),(0,r.kt)("p",null,"Eventually, you should end up with a file tree similar to this one:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"file-structure-domain-interaction.png",src:n(136).Z,width:"424",height:"767"})),(0,r.kt)("p",null,"This was a bit of a hassle, but we are now all lined up for an even deeper dive into\nthe clean hexagonal onion and its perks."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Well done so far!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'if (allTestsGreen == true) {\n    log.info("DONE! Let\'s move on to the next topic: n+1 - Do it yourself")}\nelse{\n    log.error("Shout for help!") || (git stash && git checkout 7-separate-domain-interaction-done)\n}\n')))}d.isMDXComponent=!0},855:function(e,t,n){t.Z=n.p+"assets/images/domain-interaction_package-6e9eb15d7cddc4594d29b4e8a9b7f2f4.png"},136:function(e,t,n){t.Z=n.p+"assets/images/file-structure-domain-interaction-94bd49c664c9604fc44a7707a3782000.png"}}]);